package org.yakindu.scr.lightswitch2;
import org.yakindu.scr.ITimer;

public class LightSwitch2Statemachine implements ILightSwitch2Statemachine {

	protected class SCInterfaceImpl implements SCInterface {

		private SCInterfaceOperationCallback operationCallback;

		public void setSCInterfaceOperationCallback(SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}

	}

	protected SCInterfaceImpl sCInterface;

	private boolean initialized = false;

	public enum State {
		lED1_off, lED1_on, lED2_off, lED2_on, $NullState$
	};

	private final State[] stateVector = new State[2];

	private int nextStateIndex;

	private ITimer timer;

	private final boolean[] timeEvents = new boolean[4];

	public LightSwitch2Statemachine() {

		sCInterface = new SCInterfaceImpl();
	}

	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}

		clearEvents();
		clearOutEvents();

	}

	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");

		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_LED1_default();

		enterSequence_LED2_default();
	}

	public void exit() {
		exitSequence_LED1();

		exitSequence_LED2();
	}

	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {

		return stateVector[0] != State.$NullState$ || stateVector[1] != State.$NullState$;
	}

	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	 * @see IStatemachine#isFinal()
	 */
	public boolean isFinal() {
		return false;
	}

	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {

		for (int i = 0; i < timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}

	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}

	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
		switch (state) {
			case lED1_off :
				return stateVector[0] == State.lED1_off;
			case lED1_on :
				return stateVector[0] == State.lED1_on;
			case lED2_off :
				return stateVector[1] == State.lED2_off;
			case lED2_on :
				return stateVector[1] == State.lED2_on;
			default :
				return false;
		}
	}

	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correct
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}

	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}

	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}

	public SCInterface getSCInterface() {
		return sCInterface;
	}

	private boolean check_LED1_off_tr0_tr0() {
		return timeEvents[0];
	}

	private boolean check_LED1_on_tr0_tr0() {
		return timeEvents[1];
	}

	private boolean check_LED2_off_tr0_tr0() {
		return timeEvents[2];
	}

	private boolean check_LED2_on_tr0_tr0() {
		return timeEvents[3];
	}

	private void effect_LED1_off_tr0() {
		exitSequence_LED1_off();

		sCInterface.operationCallback.setLight(true, 1);

		enterSequence_LED1_on_default();
	}

	private void effect_LED1_on_tr0() {
		exitSequence_LED1_on();

		sCInterface.operationCallback.setLight(false, 1);

		enterSequence_LED1_off_default();
	}

	private void effect_LED2_off_tr0() {
		exitSequence_LED2_off();

		sCInterface.operationCallback.setLight(true, 2);

		enterSequence_LED2_on_default();
	}

	private void effect_LED2_on_tr0() {
		exitSequence_LED2_on();

		sCInterface.operationCallback.setLight(false, 2);

		enterSequence_LED2_off_default();
	}

	/* Entry action for state 'off'. */
	private void entryAction_LED1_off() {

		timer.setTimer(this, 0, 2 * 1000, false);
	}

	/* Entry action for state 'on'. */
	private void entryAction_LED1_on() {

		timer.setTimer(this, 1, 2 * 1000, false);
	}

	/* Entry action for state 'off'. */
	private void entryAction_LED2_off() {

		timer.setTimer(this, 2, 1 * 1000, false);
	}

	/* Entry action for state 'on'. */
	private void entryAction_LED2_on() {

		timer.setTimer(this, 3, 1 * 1000, false);
	}

	/* Exit action for state 'off'. */
	private void exitAction_LED1_off() {
		timer.unsetTimer(this, 0);
	}

	/* Exit action for state 'on'. */
	private void exitAction_LED1_on() {
		timer.unsetTimer(this, 1);
	}

	/* Exit action for state 'off'. */
	private void exitAction_LED2_off() {
		timer.unsetTimer(this, 2);
	}

	/* Exit action for state 'on'. */
	private void exitAction_LED2_on() {
		timer.unsetTimer(this, 3);
	}

	/* 'default' enter sequence for state off */
	private void enterSequence_LED1_off_default() {
		entryAction_LED1_off();

		nextStateIndex = 0;
		stateVector[0] = State.lED1_off;
	}

	/* 'default' enter sequence for state on */
	private void enterSequence_LED1_on_default() {
		entryAction_LED1_on();

		nextStateIndex = 0;
		stateVector[0] = State.lED1_on;
	}

	/* 'default' enter sequence for state off */
	private void enterSequence_LED2_off_default() {
		entryAction_LED2_off();

		nextStateIndex = 1;
		stateVector[1] = State.lED2_off;
	}

	/* 'default' enter sequence for state on */
	private void enterSequence_LED2_on_default() {
		entryAction_LED2_on();

		nextStateIndex = 1;
		stateVector[1] = State.lED2_on;
	}

	/* 'default' enter sequence for region LED1 */
	private void enterSequence_LED1_default() {
		react_LED1__entry_Default();
	}

	/* 'default' enter sequence for region LED2 */
	private void enterSequence_LED2_default() {
		react_LED2__entry_Default();
	}

	/* Default exit sequence for state off */
	private void exitSequence_LED1_off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;

		exitAction_LED1_off();
	}

	/* Default exit sequence for state on */
	private void exitSequence_LED1_on() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;

		exitAction_LED1_on();
	}

	/* Default exit sequence for state off */
	private void exitSequence_LED2_off() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;

		exitAction_LED2_off();
	}

	/* Default exit sequence for state on */
	private void exitSequence_LED2_on() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;

		exitAction_LED2_on();
	}

	/* Default exit sequence for region LED1 */
	private void exitSequence_LED1() {
		switch (stateVector[0]) {
			case lED1_off :
				exitSequence_LED1_off();
				break;

			case lED1_on :
				exitSequence_LED1_on();
				break;

			default :
				break;
		}
	}

	/* Default exit sequence for region LED2 */
	private void exitSequence_LED2() {
		switch (stateVector[1]) {
			case lED2_off :
				exitSequence_LED2_off();
				break;

			case lED2_on :
				exitSequence_LED2_on();
				break;

			default :
				break;
		}
	}

	/* The reactions of state off. */
	private void react_LED1_off() {
		if (check_LED1_off_tr0_tr0()) {
			effect_LED1_off_tr0();
		}
	}

	/* The reactions of state on. */
	private void react_LED1_on() {
		if (check_LED1_on_tr0_tr0()) {
			effect_LED1_on_tr0();
		}
	}

	/* The reactions of state off. */
	private void react_LED2_off() {
		if (check_LED2_off_tr0_tr0()) {
			effect_LED2_off_tr0();
		}
	}

	/* The reactions of state on. */
	private void react_LED2_on() {
		if (check_LED2_on_tr0_tr0()) {
			effect_LED2_on_tr0();
		}
	}

	/* Default react sequence for initial entry  */
	private void react_LED1__entry_Default() {
		enterSequence_LED1_off_default();
	}

	/* Default react sequence for initial entry  */
	private void react_LED2__entry_Default() {
		enterSequence_LED2_off_default();
	}

	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");

		clearOutEvents();

		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {

			switch (stateVector[nextStateIndex]) {
				case lED1_off :
					react_LED1_off();
					break;
				case lED1_on :
					react_LED1_on();
					break;
				case lED2_off :
					react_LED2_off();
					break;
				case lED2_on :
					react_LED2_on();
					break;
				default :
					// $NullState$
			}
		}

		clearEvents();
	}
}
