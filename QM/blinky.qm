<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <framework name="qpc"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpc::QMActive">
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);</action>
     <initial_glyph conn="3,11,5,0,14,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="24,19,1,3,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="9,15,15,10">
      <entry box="1,2,11,6"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="43,25,2,2,2,-21,-2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="35,14,15,11">
      <entry box="1,2,10,5"/>
     </state_glyph>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="blinky.c">
   <text>#include &quot;qp_port.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define BSP_TICKS_PER_SEC 500

void BSP_ledOff(void) {
    printf(&quot;LED OFF@n&quot;);
}
void BSP_ledOn(void) {
    printf(&quot;LED ON@n&quot;);
}
void Q_onAssert(char const Q_ROM * const Q_ROM_VAR file, int line) {
    fprintf(stderr, &quot;Assertion failed in %s, line %d&quot;, file, line);
    exit(0);
}
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTick(void) {
    QF_TICK((void *)0);
}

enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG,
    MAX_SIG
};

/*************** ask QM to declare the Blinky class ******************/
/*${AOs::Blinky} ...........................................................*/
typedef struct {
/* protected: */
    QMActive super;

/* private: */
    QTimeEvt timeEvt;
} Blinky;

/* protected: */
static QState Blinky_initial(Blinky * const me, QEvt const * const e);
static QState Blinky_off  (Blinky * const me, QEvt const * const e);
static QState Blinky_off_e(Blinky * const me);
static QMState const Blinky_off_s = {
    (QMState const *)0, /* superstate (top) */
    Q_STATE_CAST(&amp;Blinky_off),
    Q_ACTION_CAST(&amp;Blinky_off_e),
    Q_ACTION_CAST(0), /* no exit action */
    Q_ACTION_CAST(0)  /* no intitial tran. */
};
static QState Blinky_on  (Blinky * const me, QEvt const * const e);
static QState Blinky_on_e(Blinky * const me);
static QMState const Blinky_on_s = {
    (QMState const *)0, /* superstate (top) */
    Q_STATE_CAST(&amp;Blinky_on),
    Q_ACTION_CAST(&amp;Blinky_on_e),
    Q_ACTION_CAST(0), /* no exit action */
    Q_ACTION_CAST(0)  /* no intitial tran. */
};


/*************** ask QM to define the Blinky class  ******************/
/*${AOs::Blinky} ...........................................................*/
/*${AOs::Blinky::SM} .......................................................*/
static QState Blinky_initial(Blinky * const me, QEvt const * const e) {
    static struct {
        QMState const *target;
        QActionHandler act[2];
    } const tatbl_ = { /* transition-action table */
        &amp;Blinky_off_s, /* target state */
        {
            Q_ACTION_CAST(&amp;Blinky_off_e), /* entry */
            Q_ACTION_CAST(0) /* zero terminator */
        }
    };
    /* ${AOs::Blinky::SM::initial} */
    QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);

    return QM_TRAN_INIT(&amp;tatbl_);
}
/*${AOs::Blinky::SM::off} ..................................................*/
/* ${AOs::Blinky::SM::off} */
static QState Blinky_off_e(Blinky * const me) {
    BSP_ledOff();
    (void)me; /* avoid compiler warning in case 'me' is not used */
    return QM_ENTRY(&amp;Blinky_off_s);
}
/* ${AOs::Blinky::SM::off} */
static QState Blinky_off(Blinky * const me, QEvt const * const e) {
    QState status_;
    switch (e-&gt;sig) {
        /* ${AOs::Blinky::SM::off::TIMEOUT} */
        case TIMEOUT_SIG: {
            static struct {
                QMState const *target;
                QActionHandler act[2];
            } const tatbl_ = { /* transition-action table */
                &amp;Blinky_on_s, /* target state */
                {
                    Q_ACTION_CAST(&amp;Blinky_on_e), /* entry */
                    Q_ACTION_CAST(0) /* zero terminator */
                }
            };
            status_ = QM_TRAN(&amp;tatbl_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}
/*${AOs::Blinky::SM::on} ...................................................*/
/* ${AOs::Blinky::SM::on} */
static QState Blinky_on_e(Blinky * const me) {
    BSP_ledOn();
    (void)me; /* avoid compiler warning in case 'me' is not used */
    return QM_ENTRY(&amp;Blinky_on_s);
}
/* ${AOs::Blinky::SM::on} */
static QState Blinky_on(Blinky * const me, QEvt const * const e) {
    QState status_;
    switch (e-&gt;sig) {
        /* ${AOs::Blinky::SM::on::TIMEOUT} */
        case TIMEOUT_SIG: {
            static struct {
                QMState const *target;
                QActionHandler act[2];
            } const tatbl_ = { /* transition-action table */
                &amp;Blinky_off_s, /* target state */
                {
                    Q_ACTION_CAST(&amp;Blinky_off_e), /* entry */
                    Q_ACTION_CAST(0) /* zero terminator */
                }
            };
            status_ = QM_TRAN(&amp;tatbl_);
            break;
        }
        default: {
            status_ = QM_SUPER();
            break;
        }
    }
    return status_;
}


static Blinky l_blinky;
QActive *AO_Blinky = &amp;l_blinky.super;

static void Blinky_ctor(void) {
    Blinky *me = (Blinky *)AO_Blinky;
    QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
    QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);
}

int main() {
    static QEvt const *blinky_queueSto[10];

    Blinky_ctor();
    QF_init();

    QActive_start(AO_Blinky, 1U,
                  blinky_queueSto, Q_DIM(blinky_queueSto),
                  (void *)0, 1024U, (QEvt *)0);
    return QF_run();
}</text>
  </file>
 </directory>
</model>
