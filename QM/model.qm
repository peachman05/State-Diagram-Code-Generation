<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.3">
 <framework name="qpc"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpc::QMActive">
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
</action>
     <initial_glyph conn="5,1,4,1,-1,17,7,-2">
      <action box="17,0,20,6"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="19,13,2,0,2,-4,4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="7,3,13,10">
      <entry box="1,2,9,6"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="7,27,3,3,-2,-18,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="7,19,14,9">
      <entry box="1,2,11,4"/>
     </state_glyph>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <directory name=".">
   <file name="blinky.c">
    <text>#include &quot;qp_port.h&quot;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define BSP_TICKS_PER_SEC 100


void Q_onAssert(char const Q_ROM * const Q_ROM_VAR file, int line) {
    fprintf(stderr, &quot;Assertion failed in %s, line %d&quot;, file, line);
    exit(0);
}
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTick(void) {
    QF_TICK((void *)0);
}

enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG,
    MAX_SIG
};

/*************** ask QM to declare the Blinky class ******************/
$declare(AOs::Blinky)

/*************** ask QM to define the Blinky class  ******************/
$define(AOs::Blinky)

static Blinky l_blinky;
QActive *AO_Blinky = &amp;l_blinky.super;

static void Blinky_ctor(void) {
    Blinky *me = (Blinky *)AO_Blinky;
    QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
    QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);
}

int main() {
    static QEvt const *blinky_queueSto[10];

    Blinky_ctor();
    QF_init();

    QActive_start(AO_Blinky, 1U,
                  blinky_queueSto, Q_DIM(blinky_queueSto),
                  (void *)0, 1024U, (QEvt *)0);
    return QF_run();
}</text>
   </file>
  </directory>
 </package>
</model>
